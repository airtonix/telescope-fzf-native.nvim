---
description: |
  Takes artifacts in a source directory and creates a release

type: composite

inputs:

  source:
    required: true
    description: source directory

  staging:
    description: Directory to hold staging release fies
    default: staging

  is_development_release:
    description: Is this a dev release?
    default: true

  is_production_release:
    description: Is this a prod release?
    default: false

  development_title:
    required: true

  development_tag:
    required: true

  production_title:
    required: true

  production_tag:
    required: true


steps:

  # https://github.com/orgs/community/discussions/26288#discussioncomment-3251220
  - name: Prepare Release
    env:
      SOURCE: ${{ inputs.source }}
      STAGING: ${{ inputs.staging }}
    run: |

      mkdir -p releases
      for file in ${SOURCE}/**/*; do
        FILENAME=$(basename $file)
        PLATFORM=$(basename $(dirname $file))
        cp $file "releases/${PLATFORM}-${FILENAME}"
      done

      ls -al ${STAGING}/*

  # Development Release
  #
  # If workflow runs because commits are pushd to the mainline
  # branch, then it's assumed to be a development release.
  #
  # There's only ever one "development" release, whatever is the latest
  # changes to `main`.
  #
  # For version release, see below "Production Release"
  #
  - uses: ncipollo/release-action@v1
    name: Release Development
    if: ${{ inputs.is_development_release == 'true' }}
    with:
      name: ${{ inputs.development_title }}
      tag: ${{ inputs.development_tag }}
      omitBody: true
      omitBodyDuringUpdate: false
      allowUpdates: true
      makeLatest: false
      prerelease: true
      removeArtifacts: true
      replacesArtifacts: true
      artifacts: ${{ inputs.staging }}/*
      commit: ${{ github.sha }}


  # Production Release
  #
  # If the workflow runs because a tag was pushed, then this is considered
  # a production release.
  #
  - uses: ncipollo/release-action@v1
    name: Release Tag
    if: ${{ inputs.is_production_release == 'true' }}
    with:
      name: ${{ inputs.production_title }}
      tag: ${{ inputs.production_tag }}
      omitBody: true
      allowUpdates: true
      makeLatest: true
      removeArtifacts: true
      replacesArtifacts: true
      artifacts: ${{ inputs.staging }}/*
      commit: ${{ github.sha }}
