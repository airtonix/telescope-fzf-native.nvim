name: Release

on:
  pull_request: 
  push:
    tags:
      - "v*"
    branches:
      - "main"
      - "feature/*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  unix:
    name: unix build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            compiler: gcc
          - os: ubuntu-20.04
            compiler: clang
          - os: macos-10.15
            compiler: gcc
          - os: macos-10.15
            compiler: clang
    steps:

      - uses: actions/checkout@v3

      - name: Prepare
        env:
          CC: ${{ matrix.compiler }}
        run: |
          cc --version
          git clone https://github.com/Conni2461/examiner
          cd examiner
          make && sudo make install

      - name: Build
        env:
          CC: ${{ matrix.compiler }}
          LD_LIBRARY_PATH: /usr/lib:/usr/local/lib
        run: make

      - name: Tests
        env:
          CC: ${{ matrix.compiler }}
          LD_LIBRARY_PATH: /usr/lib:/usr/local/lib
        run: make test

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{matrix.compiler}}
          path: build/*.so

  windows:
    name: windows build
        
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            # TODO: specify actual correct compiler name here for windows
            compiler: cc
            family: windows-x64
        # TODO: add in clang build too ? 

    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
      - name: Build
        run: |
          cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cmake --install build --prefix build

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.family }}-${{ matrix.compiler }}
          path: build/*.dll

  release:
    needs:
      - windows
      - unix

    name: Release binaries

    runs-on: ubuntu-latest
      
    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      # https://github.com/orgs/community/discussions/26288#discussioncomment-3251220
      - name: Compute context variables
        run: |
          RELEASE_LIST=$(sh ./scripts/generate-release-list.sh artifacts)
          if [ -n "${RELEASE_LIST}" ]; then
            echo "RELEASE_LIST: ${RELEASE_LIST}"

            echo "RELEASE_LIST<<EOF" >> $GITHUB_ENV
            echo "${RELEASE_LIST}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - uses: marvinpinto/action-automatic-releases@v1.2.1
        if: github.ref_name == 'main'
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: ${{ env.RELEASE_LIST }}

      - uses: marvinpinto/action-automatic-releases@v1.2.1
        if: github.pr.number != '' && github.ref_name != 'main'
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: true
          title: ${{ github.ref_name }}
          automatic_release_tag: ${{ github.reg_name }}
          files: ${{ env.RELEASE_LIST }}


      - uses: marvinpinto/action-automatic-releases@v1.2.1
        if: github.pr.numer == '' && github.ref_name != 'main'
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          title: ${{ github.ref_name }}
          automatic_release_tag: ${{ github.reg_name }}
          files: ${{ env.RELEASE_LIST }}
