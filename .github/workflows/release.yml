name: Release

on:
  pull_request: 
  push:
    tags:
      - "v*"
    branches:
      - "main"
      - "feature/*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  unix:
    name: unix build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            compiler: gcc
          - os: ubuntu-20.04
            compiler: clang
          - os: macos-10.15
            compiler: gcc
          - os: macos-10.15
            compiler: clang
    steps:

      - uses: actions/checkout@v3

      - name: Prepare
        env:
          CC: ${{ matrix.compiler }}
        run: |
          cc --version
          git clone https://github.com/Conni2461/examiner
          cd examiner
          make && sudo make install

      - name: Build
        env:
          CC: ${{ matrix.compiler }}
          LD_LIBRARY_PATH: /usr/lib:/usr/local/lib
        run: make

      - name: Tests
        env:
          CC: ${{ matrix.compiler }}
          LD_LIBRARY_PATH: /usr/lib:/usr/local/lib
        run: make test

      # NOTE:
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{matrix.compiler}}
          path: build/*.so

  windows:
    name: windows build

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # TODO: add in clang build too ?
          - os: windows-2019
            # TODO: specify actual correct compiler name here for windows
            compiler: cc

    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
      - name: Build
        run: |
          cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cmake --install build --prefix build

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.compiler }}
          path: build/*.dll

  release:
    needs:
      - windows
      - unix

    name: Release binaries

    runs-on: ubuntu-latest
      
    steps:
      - run: |
          echo ${{ github.event_name }}
          echo ${{ toJSON(github.event) }}

      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      
      # https://github.com/orgs/community/discussions/26288#discussioncomment-3251220
      - name: Prepare Release
        run: |

          mkdir -p releases
          for file in artifacts/**/*; do
            FILENAME=$(basename $file)
            PLATFORM=$(basename $(dirname $file))
            cp $file "releases/${PLATFORM}-${FILENAME}"
          done

          ls -al releases/*

      # Development Release
      #
      # If workflow runs because commits are pushd to the mainline
      # branch, then it's assumed to be a development release.
      #
      # There's only ever one "development" release, whatever is the latest
      # changes to `main`.
      #
      # For version release, see below "Production Release"
      #
      - uses: ncipollo/release-action@v1
        name: Release Development
        if: ${{ github.ref_name == 'main' }}
        with:
          name: Development
          tag: next
          omitBody: true
          omitBodyDuringUpdate: false
          allowUpdates: true
          makeLatest: false
          prerelease: true
          removeArtifacts: true
          replacesArtifacts: true
          artifacts: release/*
          commit: ${{ github.sha }}


      # Production Release
      #
      # If the workflow runs because a tag was pushed, then this is considered
      # a production release.
      #
      - uses: ncipollo/release-action@v1
        name: Release Tag
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        with:
          name: ${{ github.ref_name }}
          tag: ${{ github.ref_name }}
          omitBody: true
          allowUpdates: true
          makeLatest: true
          removeArtifacts: true
          replacesArtifacts: true
          artifacts: release/*
          commit: ${{ github.sha }}

      # Production Release
      #
      # If the workflow runs because a tag was pushed, then this is considered
      # a production release.
      #
      - uses: ncipollo/release-action@v1
        name: Release
        # if: ${{ startsWith(github.ref, 'refs/heads') && github.ref_name != 'main' }}
        if: ${{ github.event_name == 'pull' }}
        with:
          name: ${{ github.ref_name }}
          # https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads?actionType=synchronize#pull_request
          tag: ${{ github.event.number }}
          omitBody: true
          allowUpdates: true
          makeLatest: false
          removeArtifacts: true # attempt to remove autogenerated zip files
          replacesArtifacts: true
          artifacts: release/*
          commit: ${{ github.sha }}
